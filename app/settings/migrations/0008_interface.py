# Generated by Django 2.2.7 on 2019-11-25 06:05

import colorfield.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    dependencies = [
        ('preferences', '0002_auto_20181220_0803'),
        ('app_settings', '0007_default_statuses'),
    ]

    operations = [
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('preferences_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='preferences.Preferences')),
                ('booking_popup', models.BooleanField(default=False, verbose_name='открывать брони в отдельном окне')),
                ('clean_mode', models.BooleanField(default=True, verbose_name='отображать статус уборки номера')),
                ('booking_offset', models.BooleanField(default=True, verbose_name='смещать полоску бронирования на половину суток')),
                ('show_calendar_foot', models.BooleanField(default=True, verbose_name='дублировать даты внизу шахматки')),
                ('show_extra_data', models.BooleanField(default=False, verbose_name='отображать дополнительные данные клиента на полоске бронирования')),
                ('show_client_comment', models.BooleanField(default=True, verbose_name='отображать пожелания клиента в окне информации о брони')),
                ('room_name_fixed', models.BooleanField(default=True, verbose_name='фиксировать названия номеров при горизонтальной прокрутке')),
                ('not_payed_info', models.BooleanField(default=True, verbose_name='помечать неоплаченные брони (для статусов "Проживание" и "Выезд")')),
                ('comment_info', models.BooleanField(default=True, verbose_name='помечать брони с комментарием')),
                ('audio_notify', models.BooleanField(default=True, verbose_name='включить звуковые уведомления')),
                ('auto_price', models.BooleanField(default=True, verbose_name='автоматически подставлять цену в поле "К оплате" при создании брони')),
                ('auto_edit_price', models.BooleanField(default=True, verbose_name='автоматически обновлять цену в поле "К оплате" при изменении брони')),
                ('check_bl', models.BooleanField(default=True, verbose_name='автоматически проверять клиента по черному списку')),
                ('support', models.BooleanField(default=False, verbose_name='включить онлайн-консультант')),
                ('booking_tooltip', models.PositiveSmallIntegerField(choices=[(0, 'при наведении'), (1, 'при нажатии')], default=1, verbose_name='Показывать всплывающее окно с информацией о брони')),
                ('payed_layer', models.PositiveSmallIntegerField(choices=[(0, 'нет'), (1, 'относительный период'), (2, 'фактический период')], default=2, verbose_name='Выделять цветом период оплаты брони')),
                ('payed_layer_stripe', models.BooleanField(default=False, verbose_name='использовать штриховку')),
                ('room_group', models.PositiveSmallIntegerField(choices=[(0, 'по категориям'), (2, 'по этажам'), (3, 'по корпусам'), (1, 'не группировать')], default=0, verbose_name='Группировать номера в шахматке')),
                ('today_color', colorfield.fields.ColorField(default='#4ec8ea', max_length=18, verbose_name='Цвет линии текущего дня')),
                ('payed_layer_color', colorfield.fields.ColorField(default='#009f1a', max_length=18, verbose_name='Цвет оплаченного периода на полоске бронирования')),
                ('room_closed_color', colorfield.fields.ColorField(default='#7c7878', max_length=18, verbose_name='Цвет периода закрытого на ремонт номера')),
                ('payed_layer_status', models.ManyToManyField(to='app_settings.Status', verbose_name='Выделять цветом период оплаты брони для статусов')),
            ],
            options={
                'verbose_name': 'Interface setting',
                'verbose_name_plural': 'Interface settings',
            },
            bases=('preferences.preferences',),
            managers=[
                ('singleton', django.db.models.manager.Manager()),
            ],
        ),
    ]
